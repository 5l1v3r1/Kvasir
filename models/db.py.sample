# -*- coding: utf-8 -*-

from gluon.tools import Mail, Auth, Crud, Service, PluginManager
from gluon.storage import Storage
from gluon import current
from utils import web2py_uuid
import os, socket

settings = Storage()
settings.migrate = True
settings.fake_migrate = False
settings.title = 'Kvasir'
settings.subtitle = 'Beware of evil dwarves'

response.combine_files = True
response.minify_files = True

settings.customer = u'CUSTOMER NAME'
settings.assessment_type = 'INTERNAL'
settings.start_date = 'START DATE'
settings.end_date = 'END DATE'

settings.author = 'Cisco Systems Security Posture Assessment Team'
settings.author_email = 'kvasirdevs@external.cisco.com'
settings.keywords = ''
settings.description = ''
settings.layout_theme = 'Default'
settings.database_uri = 'postgres://pguser:pgpass@localhost:5432/kvasir'
#settings.msfdb_uri = 'postgres://msfuser:msfpass@localhost:5432/msf'
settings.security_key = 'sha512:36518081-c858-47ad-8832-a28d842f3052'
settings.email_server = 'localhost'
settings.email_sender = 'kvasirdevs@external.cisco.com'
settings.email_login = ''
settings.login_method = 'local'
settings.login_config = ''
settings.scheduler_group_name = socket.gethostname()

# I hate putting globals like this in but this seems to be the best user-serviceable area without having to check
# database entries in t_errata each time.

settings.use_cvss = False                     # use f_cvss_score instead of f_severity for t_vulndata
settings.shodanhq_apikey = ''                 # obtain @ http://www.shodanhq.com/api_doc
settings.nmap = 'nmap'                        # use $PATH searching for nmap binary
settings.phantomjs = 'phantomjs'              # use $PATH searching for phantomjs binary
settings.password_upload_dir = 'data/passwords/misc'
settings.nmap_sharedir = '/usr/local/share/nmap'
settings.nmap_scriptdir = os.path.join(settings.nmap_sharedir, 'scripts')
settings.nmap_nselibdir = os.path.join(settings.nmap_sharedir, 'nselib')
settings.ignored_nessus_plugins = [
    '19506',        # Nessus Scan Information
    '11219',        # Nessus SYN Scanner
    '34277',        # Nessus UDP Scanner
]

if request.env.web2py_runtime_gae:            # if running on Google App Engine
    db = DAL('gae')                           # connect to Google BigTable
    session.connect(request, response, db = db) # and store sessions and tickets there
    ### or use the following lines to store sessions in Memcache
    # from gluon.contrib.memdb import MEMDB
    # from google.appengine.api.memcache import Client
    # session.connect(request, response, db = MEMDB(Client()))
else:                                         # else use a normal relational database
    db = DAL(settings.database_uri, check_reserved=['all'], lazy_tables=True, pool_size=10)
## if no need for session
# session.forget()

mail = Mail()                                  # mailer
auth = Auth(db)                      # authentication/authorization
crud = Crud(db)                      # for CRUD helpers using auth
service = Service()                   # for json, xml, jsonrpc, xmlrpc, amfrpc
plugins = PluginManager()
#db._common_fields.append(auth.signature)

auth.settings.hmac_key = settings.security_key # before define_tables()
auth.settings.actions_disabled = [ 'register', 'request_reset_password', 'retrieve_username' ]
auth.settings.allow_basic_login=True

#crud.settings.auth = auth                      # =auth to enforce authorization on crud

#mail.settings.server = settings.email_server
#mail.settings.sender = settings.email_sender
#mail.settings.login = settings.email_login

response.generic_patterns = ['*.load', '*.json', '*.xml', '*.html']

##-------------------------------------------------------------------------

# logging

import logging, logging.handlers

def get_configured_logger(name):
    logger = logging.getLogger(name)
    if (len(logger.handlers) == 0):
        # This logger has no handlers, so we can assume it hasn't yet been configured
        formatter="%(asctime)s %(levelname)s %(process)s %(thread)s %(funcName)s():%(lineno)d %(message)s"
        logging.basicConfig(format=formatter, level=logging.DEBUG)

    return logger

# Assign application logger to a global var
logger = get_configured_logger(request.application)

# Assign auth to current
current.auth = auth
