# -*- coding: utf-8 -*-

##--------------------------------------#
## Kvasir
##
## (c) 2010-2013 Cisco Systems, Inc.
##
## Exploit database controller
##
## https://github.com/offensive-security/exploit-database
## id,file,description,date,author,platform,type,port
##
## Author: Kurt Grutzmacher <kgrutzma@cisco.com>
##--------------------------------------#

try:
    import git
    if git.__version__ < '0.3.1':
        raise ImportError("Your version of git is %s. Upgrade to 0.3.1 or better." % git.__version__)
    have_git = True
except ImportError, e:
    have_git = False
    GIT_MISSING = 'Requires gitpython module, but not installed or incompatible version: %s' % e

import csv
import os
import logging
logger = logging.getLogger("web2py.app.kvasir")
crud.settings.formstyle = formstyle_bootstrap_kvasir

@auth.requires_login()
def index():
    if settings.exploitdb_path:
        if not os.path.exists(settings.exploitdb_path):
            redirect(URL('invalid'))
    return dict()

def invalid():
    """
    settings.exploitdb_path is not set or invalid
    """
    return dict()

@auth.requires_login()
def details():
    """
    Serve up details of a specific exploitdb item
    """
    if settings.pwnwiki_path:
        if not os.path.exists(settings.pwnwiki_path):
            redirect(URL('invalid'))

@auth.requires_login()
def git_pull():
    """
    Git Pull handler
    """
    if not have_git:
        session.flash = GIT_MISSING
        redirect(URL('invalid'))

    dialog = FORM.confirm(T('Pull'),
                          {T('Cancel'): URL('index')})
    if dialog.accepted:
        try:
            repo = git.Repo(settings.exploitdb_path)
            origin = repo.remotes.origin
            origin.fetch()
            origin.pull()
            session.flash = T("Exploit-database updated")
            redirect(URL('index'))

        except git.CheckoutError:
            session.flash = T("Pull failed, certain files could not be checked out. Check logs for details.")
            redirect(URL('index'))
        except git.UnmergedEntriesError:
            session.flash = T("Pull is not possible because you have unmerged files. Fix them up in the work tree, and then try again.")
            redirect(URL('index'))
        except git.GitCommandError:
            session.flash = T(
                "Pull failed, git exited abnormally. See logs for details.")
            redirect(URL('index'))
        except AssertionError:
            session.flash = T("Pull is not possible because you have unmerged files. Fix them up in the work tree, and then try again.")
            redirect(URL('index'))
    elif 'cancel' in request.vars:
        redirect(URL('index'))
    return dict(dialog=dialog)


